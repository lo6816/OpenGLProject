#version 330 core
out vec4 FragColor;
precision mediump float; 
in vec4 v_col; 
in vec2 v_t; 

in vec3 v_frag_coord; 
in vec3 v_normal; 

uniform sampler2D ourTexture; 

uniform vec3 u_view_pos; 
uniform vec3 u_light_direction; 

struct Light{
vec3 light_pos; 
float ambient_strength; 
float diffuse_strength; 
float specular_strength; 
		//attenuation factor
float constant;
float linear;
float quadratic;
};
uniform Light light;

uniform float shininess; 
uniform float now;
uniform float sunIntensity;


float specularCalculation(vec3 N, vec3 L, vec3 V ){ 
vec3 R = reflect (-L,N);   //reflect (-L,N) is  equivalent to //max (2 * dot(N,L) * N - L , 0.0) ;
float cosTheta = dot(R , V); 
float spec = pow(max(cosTheta,0.0), 32.0); 
return light.specular_strength * spec;
}\

float CalcPointLight(Light light, vec3 N, vec3 V, vec3 L)
{
float specular = specularCalculation( N, L, V); 
float diffuse = light.diffuse_strength * max(dot(N,L),0.0);
float distance = length(light.light_pos - v_frag_coord);
float attenuation = 1 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
float res = light.ambient_strength + attenuation * (diffuse + specular); 
return res; 
}

float CalcDirectionalLight(Light light, vec3 N, vec3 V, vec3 L)
{
			// "float specular = specularCalculation( N, L, V); \n"
float diffuse = light.diffuse_strength * max(dot(N,L),0.0);
float attenuation = 1; 
float orbitAngle = atan(light.light_pos.x, light.light_pos.y);
float dynamicIntensity = sunIntensity * clamp(0.5 + 0.5 * cos(orbitAngle), 0.0, 1.0);
float res = light.ambient_strength + dynamicIntensity * attenuation * (diffuse); 
return res; 
}

void main() { 
vec3 N = normalize(v_normal);
vec3 V = normalize(u_view_pos - v_frag_coord); 
float result = CalcDirectionalLight(light, N, V, normalize(-u_light_direction)); 
result += CalcPointLight(light, N, V, normalize(light.light_pos - v_frag_coord)); 

		// Récupération de la couleur de texture
vec3 texColor = texture(ourTexture, v_t).rgb; 

		// "FragColor = v_col*(1.0-v_t.y); \n" //for the sake of the exercise, we will color the result using texture and color coordinated present in the file, feel free to change the shaders as you prefer
		// "FragColor = texture(ourTexture, v_t); \n"
FragColor = vec4(texColor * result, 1.0); 
} ;